@model IEnumerable<VDMS.Models.Document>
@{
    ViewBag.Title = "Documents";

    VDMS.Models.Document document = new VDMS.Models.Document();

    var grid = new WebGrid(Model, canPage: true, rowsPerPage: 20, selectionFieldName: "selectedRow", ajaxUpdateContainerId: "gridContent");
    grid.Pager(WebGridPagerModes.NextPrevious);

    var gridColumns = new List<WebGridColumn>();
    gridColumns.Add(grid.Column("DocSerial", format: (item) => item.GetSelectLink(item.DocSerial)));
    gridColumns.Add(grid.Column("Branch.Name", "Branch Name"));
    gridColumns.Add(grid.Column("DocumentType.Name", "Type"));
    gridColumns.Add(grid.Column("UserName", "Created by"));
    gridColumns.Add(grid.Column("Inbound", "Inbound", 
        format:@<text><input class="check-box" id="inboundChkBx" name="inboundChkBx" type="checkbox" value="@item.Inbound" disabled
                             @(item.Inbound == false ? null : "checked") /></text>
        ));
    gridColumns.Add(grid.Column("Recipient", "Recipient"));
    gridColumns.Add(grid.Column("Description", "Description", style: "description"));
    gridColumns.Add(grid.Column("CreationDate", "Creation Date", format: (item) => item.CreationDate.ToString("dd-MMM-yyyy")));
    gridColumns.Add(grid.Column(format: (item) => Html.ActionLink("Details", "Details", new
    {
        id = item.DocID
    })));
    if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || (User.IsInRole("MBB Developer"))))
    {
        gridColumns.Add(grid.Column(format: (item) => Html.ActionLink("Edit", "Edit", new { id = item.DocID })));
        gridColumns.Add(grid.Column(format: (item) => Html.ActionLink("Delete", "Delete", new { id = item.DocID })));
    }
}

<h2>Documents</h2>

<p>
    @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || (User.IsInRole("MBB Developer") || (User.IsInRole("User")))))
    {
        @Html.ActionLink("Create New", "Create")
    }
</p>

<head>
    <!-- Code to wire up the DatePicker -->
    <script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker();
        })
    </script>

    <script>
        (function ($) {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                      .addClass("custom-combobox")
                      .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                    this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                      value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                      .appendTo(this.wrapper)
                      .val(value)
                      .attr("title", "")
                      .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                      .autocomplete({
                          delay: 0,
                          minLength: 0,
                          source: $.proxy(this, "_source")
                      })
                      .tooltip({
                          tooltipClass: "ui-state-highlight"
                      });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _createShowAllButton: function () {
                    var input = this.input,
                      wasOpen = false;

                    $("<a>")
                      .attr("tabIndex", -1)
                      .tooltip()

                      .appendTo(this.wrapper)
                      .button({
                          icons: {
                              primary: "ui-icon-triangle-1-s"
                          },
                          text: false
                      })
                      .removeClass("ui-corner-all")
                      .addClass("custom-combobox-toggle ui-corner-right")
                      .mousedown(function () {
                          wasOpen = input.autocomplete("widget").is(":visible");
                      })
                      .click(function () {
                          input.focus();

                          // Close if already visible
                          if (wasOpen) {
                              return;
                          }

                          // Pass empty string as value to search for, displaying all results
                          input.autocomplete("search", "");
                      });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                      valueLowerCase = value.toLowerCase(),
                      valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                      .val("")
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.data("ui-autocomplete").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);

        $(function () {
            $("#combobox").combobox();
            $("#toggle").click(function () {
                $("#combobox").toggle();
            });
        });


    </script>

</head>

<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken();
        <div class="form-horizontal">
            <hr />

            <div class="form-group">
                <div class="form-group col-md-5">
                    @Html.Label("From", labelText: "From", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("StartDate", "", new { @class = "form-control date-picker", @autocomplete = "off" })
                    </div>
                </div>

                <div class="form-group col-md-5">
                    @Html.Label("To", labelText: "To", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBox("EndDate", "", new { @class = "form-control date-picker", @autocomplete = "off" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => document.DocTypeID, "Doc Type", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("DocTypeID", null, "Select Document", htmlAttributes: new { @class = "form-control" })
                        @Html.HiddenFor(model => document.DocTypeID)
                    </div>
                </div>
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => document.BranchID, "BranchID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("BranchID", null, "Select Branch", htmlAttributes: new { @class = "form-control" })
                        @Html.HiddenFor(model => document.BranchID)
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="form-group col-md-5">
                    @Html.Label("Created by", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("UserID", null, "Select Creator", htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>

                <div class="form-group col-md-5">
                    @Html.LabelFor(model => document.Recipient, "Recipient", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Recipient", null, "Select Recipient", htmlAttributes: new { @class = "form-control", id = "combobox" })
                        @Html.HiddenFor(model => document.Recipient)
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="form-group col-md-5">
                    @Html.Label("Origin", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.RadioButton("Inbound", "Inbound") Inbound
                        @Html.RadioButton("Inbound", "Outbound") Outbound
                        @Html.RadioButton("Inbound", "All", true) All

                        @Html.HiddenFor(model => document.Inbound)
                    </div>
                </div>

                <div class="form-group col-md-5">
                    <input type="submit" name="submit" value="Preview" class="btn btn-default" />
                    &nbsp;  &nbsp;
                    <input type="submit" name="submit" value="Export" class="btn btn-default" />
                </div>
            </div>


            <br /><br />
            <div id="gridContent">
                @grid.GetHtml(tableStyle: "vdf-doc table-responsive",
                 headerStyle: "header",
                 selectedRowStyle: "select",
                 columns: grid.Columns(gridColumns.ToArray()))

            </div>

        </div>
    }
</body>
